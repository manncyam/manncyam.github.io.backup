{"version":3,"sources":["components/SearchBar.js","components/ReportCardHeader.js","components/ReportCardBody.js","components/ReportCard.js","components/WorldTotal.js","source/language.js","components/LanguageSwitch.js","components/DailyReport.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","filteredText","isCambodia","isUSA","handleChange","dict","cam_btn","usa_btn","className","name","type","value","onChange","placeholder","search","onClick","lang","clear_btn","instruction","cambodia","usa","ReportCardHeader","country","ReportCardBody","report","countryInfo","todayCases","todayDeaths","cases","deaths","recovered","flag","nfObject","Intl","NumberFormat","format","today_cases","unit","today_deaths","total_cases","total_deaths","src","alt","ReportCard","data","cards","forEach","isIncluded","toLowerCase","indexOf","push","key","WorldTotal","totalCases","totalDeaths","totalRecovered","en","strings","report_title","data_source","km","sunday","monday","tuesday","wednesday","thursday","friday","saturday","january","february","march","april","may","june","july","august","september","october","november","december","0","1","2","3","4","5","6","7","8","9","LanguageSwitch","khmer_btn_class","english_btn_class","isChecked","checked","getKhmerNumber","numStr","numbersMap","num","trim","DailyReport","useState","updatedOn","langSwitch","state","setState","khEnDictionary","setDict","setData","useEffect","fetch","then","res","json","resData","prevData","newData","catch","error","console","log","date","d","length","Date","updated","toLocaleDateString","weekday","year","month","day","days","months","numbers","dateStrings","split","monthDate","md","khmerDay","khmerDate","khmerMonth","khmerYear","toKhmerDate","prevState","document","getElementById","innerHTML","changeTitle","e","target","newValue","href","rel","App","Component","render","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29a0ecca.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction SearchBar(props){\r\n  \r\n  const { filteredText, isCambodia, isUSA, handleChange, dict } = props\r\n  \r\n  let cam_btn = isCambodia ? \"cambodia cambodia-active\" : \"cambodia\"\r\n  let usa_btn = isUSA ? \"usa usa-active\" : \"usa\"\r\n\r\n  return(\r\n    <div className=\"searchbar\">\r\n      <div className=\"search-bar-input\">\r\n      <input \r\n        name=\"filteredText\" \r\n        type=\"text\" \r\n        value={ filteredText }\r\n        onChange={ handleChange }\r\n        placeholder={ dict.search }\r\n        className=\"search-bar-textbox\"\r\n        />\r\n      \r\n      <button\r\n        type=\"button\"\r\n        name=\"clear\"\r\n        onClick= { handleChange }\r\n        className=\"search-bar-clear-button\"\r\n        lang={ dict.lang }\r\n        >{ dict.clear_btn }\r\n      </button>\r\n      </div>\r\n        \r\n      <div className=\"search-bar-option\" lang={ dict.lang }>\r\n        { dict.instruction }\r\n      </div>\r\n      <div className=\"searchbar-button\">       \r\n        <div className=\"searchbar-button1\">\r\n          <button \r\n            type=\"button\"\r\n            name=\"isCambodia\" \r\n            onClick={ handleChange }\r\n            className= { cam_btn }\r\n            > { dict.cambodia }\r\n          </button>\r\n        </div>\r\n        <div className=\"searchbar-button2\">\r\n          <button \r\n            type=\"button\"\r\n            name=\"isUSA\"\r\n            onClick={ handleChange }\r\n            className={ usa_btn }\r\n            > { dict.usa }\r\n          </button>\r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBar","import React from 'react'\r\n\r\nfunction ReportCardHeader(props){\r\n  return (\r\n    <div className=\"report-card-header\" lang=\"en\">\r\n      {props.country}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ReportCardHeader","import React from 'react'\r\n\r\nfunction ReportCardBody(props){\r\n  let { countryInfo, todayCases, todayDeaths, cases, deaths, recovered } = props.report\r\n  const { flag } = countryInfo\r\n  const { dict } = props\r\n\r\n  const nfObject = new Intl.NumberFormat('en-US'); \r\n  todayCases = nfObject.format(todayCases);\r\n  todayDeaths = nfObject.format(todayDeaths);\r\n  cases = nfObject.format(cases);\r\n  deaths = nfObject.format(deaths);\r\n  recovered = nfObject.format(recovered);\r\n  \r\n  return (\r\n    <div className=\"report-card-body\">\r\n      <div className=\"lists\">\r\n        <span lang={ dict.lang }>{ dict.today_cases }</span>\r\n        <span className=\"list-amount\">{todayCases}</span>\r\n        <span>{ dict.unit }</span>\r\n        \r\n        <span className=\"end-section-today\" lang={ dict.lang }>{ dict.today_deaths}</span>\r\n        <span className=\"list-amount end-section-today\">{todayDeaths}</span>\r\n        <span className=\"end-section-today\">{ dict.unit }</span>\r\n        \r\n        <span lang={ dict.lang }>{ dict.total_cases }</span>\r\n        <span className=\"list-amount\">{cases}</span>\r\n        <span>{ dict.unit }</span>\r\n        \r\n        <span className=\"end-section-total\" lang={ dict.lang }>{ dict.total_deaths}</span>\r\n        <span className=\"list-amount end-section-total\">{deaths}</span>\r\n        <span className=\"end-section-total\">{ dict.unit }</span>\r\n        \r\n        <span lang={ dict.lang }>{ dict.recovered }</span>\r\n        <span className=\"list-amount\">{recovered}</span>\r\n        <span>{ dict.unit}</span>\r\n        \r\n      </div>\r\n      <img className=\"report-card-body-flag\" src={flag} alt=\"\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ReportCardBody","import React from 'react'\r\n\r\nimport ReportCardHeader from './ReportCardHeader'\r\nimport ReportCardBody from './ReportCardBody'\r\n\r\nfunction ReportCard(props){\r\n  const { filteredText, isCambodia, isUSA, data } = props\r\n  let cards = []\r\n  data.forEach(report =>{\r\n    let isIncluded = false\r\n    if(isCambodia || isUSA){\r\n      if(report.country.toLowerCase() === \"cambodia\" && isCambodia)\r\n        isIncluded = true\r\n      if(report.country.toLowerCase() === \"usa\" && isUSA)\r\n        isIncluded = true\r\n      if(filteredText !== \"\" && report.country.toLowerCase().indexOf(filteredText.toLowerCase()) !== -1)\r\n        isIncluded = true\r\n    }else{\r\n      if(report.country.toLowerCase().indexOf(filteredText.toLowerCase()) !== -1)\r\n        isIncluded = true\r\n    }\r\n    \r\n    if(isIncluded){\r\n      cards.push(\r\n        <div key={ report.country }className=\"report-card\">\r\n          <ReportCardHeader country = { report.country } />\r\n          <ReportCardBody report={ report } dict= { props.dict } />\r\n        </div>\r\n      )\r\n    }\r\n  })\r\n  return(\r\n    <div className=\"report-cards\">\r\n      {cards}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ReportCard","import React from 'react'\r\n\r\nfunction WorldTotal(props){\r\n  const { data, dict } = props\r\n  let totalCases = 0\r\n  let totalDeaths = 0\r\n  let totalRecovered = 0\r\n  \r\n  data.forEach(country =>{\r\n    totalCases += country.cases\r\n    totalDeaths += country.deaths\r\n    totalRecovered += country.recovered\r\n  })\r\n  \r\n  const nfObject = new Intl.NumberFormat('en-US'); \r\n  totalCases = nfObject.format(totalCases);\r\n  totalDeaths = nfObject.format(totalDeaths);\r\n  totalRecovered = nfObject.format(totalRecovered);\r\n  \r\n  return(\r\n    <div className=\"world-total\" lang={ dict.lang }>\r\n      <span lang={ dict.lang }>{ dict.cases }</span>\r\n      <p className=\"world-total-number world-total-cases\">{ totalCases }</p>\r\n      <span lang={ dict.lang }>{ dict.deaths }</span>\r\n      <p className=\"world-total-number world-total-deaths\">{ totalDeaths }</p>\r\n      <span lang={ dict.lang }>{ dict.recovered }</span>\r\n      <p className=\"world-total-number world-total-recovered\">{ totalRecovered }</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WorldTotal","export default {\n    languages:{\n        en:{\n            strings:{\n                lang: \"en\",\n                report_title: \"COVID-19 Daily Report\",\n                data_source: \"Data Source\",\n                cases: \"Cases\",\n                deaths: \"Deaths\",\n                recovered: \"Recovered\",\n                clear_btn: \"CLEAR\",\n                instruction: \"Select buttons below to choose countries.\",\n                cambodia: \"cambodia\",\n                usa: \"usa\",\n                today_cases: \"Today Cases\",\n                today_deaths: \"Today Deaths\",\n                total_cases: \"Total Cases\",\n                total_deaths:\"Total Deaths\",\n                unit: \"\",\n                search: \"Search...\"\n            }\n        },\n        km:{\n            strings:{\n                lang: \"km\",\n                report_title: \"របាយការណ៍ប្រចាំថ្ងៃ​អំពី កូវីដ​១៩​\",\n                data_source: \"ប្រភពទិន្នន័យ\",\n                cases: \"កើត\",\n                deaths: \"ស្លាប់\",\n                recovered: \"ជាសះស្បើយ\",\n                clear_btn: \"លុប\",\n                instruction: \"ចុចបុតតុងដើម្បីរើសប្រទេស\",\n                cambodia: \"កម្ពុជា\",\n                usa: \"អាមេរិក\",\n                today_cases: \"ចំនួនកើតថ្ងៃនេះ\",\n                today_deaths: \"ចំនួនស្លាប់ថ្ងៃនេះ\",\n                total_cases: \"ចំនួនកើតសរុប\",\n                total_deaths:\"ចំនួនស្លាប់សរុប\",\n                unit: \"នាក់\",\n                search: \"ស្វែងរក...\"\n            }\n        }\n    },\n    days:{\n        sunday: \"ថ្ងៃ អាទិត្យ\",\n        monday: \"ថ្ងៃ ច័ន្ទ\",\n        tuesday: \"ថ្ងៃ អង្គារ\",\n        wednesday: \"ថ្ងៃ ពុធ\",\n        thursday: \"ថ្ងៃ ព្រហស្បតិ៍\",\n        friday: \"ថ្ងៃ សុក្រ\",\n        saturday: \"ថ្ងៃ សៅរ៍\"\n    },\n    months:{\n        january: \"ខែ មករា\",\n        february: \"ខែ កុម្ភៈ\",\n        march: \"ខែ មីនា\",\n        april: \"ខែ មេសា\",\n        may: \"ខែ ឧសភា\",\n        june: \"ខែ មិថុនា\",\n        july: \"ខែ កក្កដា\",\n        august: \"ខែ សីហា\",\n        september: \"ខែ កញ្ញា\",\n        october: \"ខែ តុលា\",\n        november: \"ខែ វិច្ឆិកា\",\n        december: \"ខែ ធ្នូ\"\n    },\n    numbers:{\n        0:\"០\",\n        1:\"១\",\n        2:\"២\",\n        3:\"៣\",\n        4:\"៤\",\n        5:\"៥\",\n        6:\"៦\",\n        7:\"៧\",\n        8:\"៨\",\n        9:\"៩\"\n    }\n}","import React from 'react'\n\nfunction LanguageSwitch(props){\n    let khmer_btn_class = \"language-switch-khmer\"\n    let english_btn_class = \"language-switch-english\"\n    if(props.isChecked){\n        english_btn_class += \" language-switch-english-active\"\n    }else{\n        khmer_btn_class += \" language-switch-khmer-active\"\n    }\n    return(\n        <div className=\"language-switch\">\n            <input name=\"langSwitch\" onClick={ props.handleChange } type=\"button\" className={ khmer_btn_class } value=\"Khmer\" />\n            <label className=\"switch\">\n                <input \n                    name=\"langSwitch\"\n                    type=\"checkbox\" \n                    checked = { props.isChecked } \n                    onChange= { props.handleChange }\n                />\n                <span className=\"slider round\"></span>\n            </label>\n            <input name=\"langSwitch\" onClick={ props.handleChange } type=\"button\" className={ english_btn_class } value=\"English\" />\n        </div>\n    )\n\n}\n\nexport default LanguageSwitch","import React, { useState, useEffect } from 'react'\r\n\r\nimport SearchBar from './SearchBar'\r\nimport ReportCard from './ReportCard'\r\nimport dataTest from '../source/data'\r\nimport WorldTotal from './WorldTotal'\r\nimport khEnDictionary from '../source/language'\r\nimport LanguageSwitch from './LanguageSwitch'\r\n\r\nconst _KHMER_DEBUG = false\r\n\r\nfunction DailyReport(){\r\n  const [state, setState] = useState({\r\n    filteredText: \"\",\r\n    isCambodia: false,\r\n    isUSA: false,\r\n    updatedOn: \"\",\r\n    langSwitch: false\r\n  })\r\n\r\n  const [dict, setDict] = useState(khEnDictionary.languages.km.strings)\r\n  const [data, setData] = useState([])\r\n\r\n  const covidUrl = \"https://corona.lmao.ninja/countries\"\r\n\r\n\r\n  useEffect(()=>{\r\n    if(_KHMER_DEBUG){\r\n      const { updated } = dataTest[0]\r\n        let d = new Date(updated)\r\n        setState(prevState =>{\r\n          return {...prevState, updatedOn: d.toLocaleDateString('en-US', { \r\n            weekday: 'long', \r\n            year: 'numeric', \r\n            month: 'long',\r\n            day: 'numeric' })}\r\n      })\r\n      setData(dataTest)\r\n    } else {\r\n      fetch(covidUrl)\r\n      .then(res => res.json())\r\n      .then(resData => {\r\n          setData(prevData =>{\r\n              let newData = []\r\n              resData.forEach(country =>{\r\n                newData.push(country)\r\n              })\r\n              return newData\r\n            })\r\n      })\r\n      .catch(error => {\r\n        console.log(\"Error : \" + error)\r\n      })\r\n    }\r\n  }, [])\r\n  \r\n  useEffect(() =>{\r\n    let date = \"\"\r\n    let d = null\r\n    if(data.length > 0){\r\n      d = new Date(data[0].updated)\r\n      date = d.toLocaleDateString('en-US', { \r\n        weekday: 'long', \r\n        year: 'numeric', \r\n        month: 'long',\r\n        day: 'numeric' })\r\n    }\r\n    \r\n    if(state.langSwitch){\r\n      setDict(khEnDictionary.languages.en.strings)\r\n    }else{\r\n      setDict(khEnDictionary.languages.km.strings)\r\n      date = toKhmerDate(date)\r\n    }\r\n\r\n    setState(prevState =>{\r\n        return {...prevState, updatedOn: date}\r\n    })\r\n  }, [state.langSwitch, data])\r\n\r\n  useEffect(() => {\r\n    changeTitle(dict)\r\n  }, [dict])\r\n\r\n  const handleChange = (e)=>{\r\n    const {name, type, value, checked} = e.target\r\n    if(type === \"button\" && name === \"langSwitch\")\r\n    {\r\n        setState(prevState =>{\r\n            return {...prevState, \r\n              [name]: value.toLowerCase() === \"english\" ? true : false}\r\n      })\r\n    } else if(type === \"checkbox\"){\r\n      setState(prevState => {\r\n        return {...prevState, [name]: checked}\r\n      })\r\n    } else if(type === \"text\"){\r\n      setState(prevState =>{\r\n        return {...prevState, [name]: value}\r\n      })\r\n    } else{\r\n      setState(prevState =>{\r\n        if(name === \"clear\"){\r\n          return {...prevState, \r\n                  filteredText: \"\",\r\n                  isCambodia: false,\r\n                  isUSA: false\r\n                }\r\n        }else{\r\n          let newValue = name === \"isUSA\" ? !prevState.isUSA : !prevState.isCambodia\r\n          return {...prevState, [name] : newValue}\r\n        }\r\n      })\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"daily-report\">\r\n      <LanguageSwitch \r\n        isChecked = { state.langSwitch }\r\n        handleChange={ handleChange }\r\n      />\r\n      <header className=\"daily-report-title\"><span lang={ dict.lang }>{dict.report_title}</span></header>\r\n      <p className=\"daily-report-updated\" lang={ dict.lang }>{state.updatedOn}</p>\r\n      { dict.data_source }: <a \r\n        className=\"data-source\" \r\n        href=\"https://corona.lmao.ninja/countries\" \r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        >Worldometer</a>\r\n      <WorldTotal data={ data } dict={ dict }/>\r\n      \r\n      <SearchBar \r\n        filteredText={state.filteredText} \r\n        isCambodia={state.isCambodia}\r\n        isUSA={state.isUSA}\r\n        handleChange={handleChange}\r\n        dict={ dict }\r\n        />\r\n      \r\n      <ReportCard \r\n        filteredText={ state.filteredText } \r\n        isCambodia={ state.isCambodia }\r\n        isUSA={ state.isUSA }\r\n        data={ data }\r\n        dict={ dict }\r\n        />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction toKhmerDate(date){\r\n  if(date === \"\")\r\n    return date\r\n  \r\n  const { days, months, numbers} = khEnDictionary\r\n  \r\n  let dateStrings = date.split(\",\")\r\n\r\n  const [day, monthDate, year] = dateStrings\r\n  let md = monthDate.trim().split(\" \")\r\n\r\n  const khmerDay = days[day.toLowerCase()]\r\n  let khmerDate = getKhmerNumber(md[1], numbers)\r\n  const khmerMonth = months[md[0].toLowerCase()]\r\n  let khmerYear = getKhmerNumber(year, numbers)\r\n  \r\n  return `${khmerDay} ទី​ ${khmerDate} ${khmerMonth} ឆ្នាំ ${khmerYear}` \r\n}\r\n\r\nfunction getKhmerNumber(numStr, numbersMap){\r\n  let num = \"\"\r\n  for( let ch of numStr.trim())\r\n  {\r\n      num += numbersMap[ch]\r\n  }\r\n  return num\r\n}\r\n\r\nfunction changeTitle(dict){\r\n  let title = document.getElementById(\"site-title\")\r\n  title.innerHTML = dict.report_title\r\n}\r\n\r\nexport default DailyReport","import React, { Component } from 'react';\r\n\r\nimport \"./App.css\"\r\nimport DailyReport from './components/DailyReport'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <DailyReport />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}